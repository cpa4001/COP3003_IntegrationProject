  Backlog.cpp
  Board.cpp
  Collaborator.cpp
  Developer.cpp
  Iteration.cpp
  KanbanBoard.cpp
  Release.cpp
  ScrumMaster.cpp
  Source.cpp
  Sprint.cpp
  UserStory.cpp
  Running Code Analysis for C/C++...
  Generating Code...
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory(723,9): warning G240FCA22: destructor called on 'Collaborator' that is abstract but has non-virtual destructor [clang-diagnostic-delete-abstract-non-virtual-dtor]
          _Ptr->~_Uty();
          ^
  C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory:950:39: note: in instantiation of function template specialization 'std::_Default_allocator_traits<std::allocator<Collaborator>>::destroy<Collaborator>' requested here
              allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
                                        ^
  C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector:1680:9: note: in instantiation of function template specialization 'std::_Destroy_range<std::allocator<Collaborator>>' requested here
          _Destroy_range(_First, _Last, _Getal());
          ^
  C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector:1764:13: note: in instantiation of member function 'std::vector<Collaborator>::_Destroy' requested here
              _Destroy(_Myfirst, _Mylast);
              ^
  C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vector:712:9: note: in instantiation of member function 'std::vector<Collaborator>::_Tidy' requested here
          _Tidy();
          ^
  C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp:15:12: note: in instantiation of member function 'std::vector<Collaborator>::~vector' requested here
  Iteration::Iteration(std::string iterationName, std::string iterationType,
             ^
  C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory:723:16: note: qualify call to silence this warning
          _Ptr->~_Uty();
                 ^
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(25,15): warning GCDA9FA94: redundant string initialization [readability-redundant-string-init]
    std::string line = "";
                ^~~~~~~~~
                line
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(56,3): warning G4F9AAA59: use range-based for loop instead [modernize-loop-convert]
    for (size_t index = 0; index < row.size(); index++) {
    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (auto & index : row)
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(71,3): warning G4F9AAA59: use range-based for loop instead [modernize-loop-convert]
    for (size_t line = 0; line < row.size(); line++) {
    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (auto & line : row)
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(75,17): warning GCDA9FA94: redundant string initialization [readability-redundant-string-init]
      std::string previousStatus = "";
                  ^~~~~~~~~~~~~~~~~~~
                  previousStatus
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(76,17): warning GCDA9FA94: redundant string initialization [readability-redundant-string-init]
      std::string newStatusString = "";
                  ^~~~~~~~~~~~~~~~~~~~
                  newStatusString
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(113,15): warning GCDA9FA94: redundant string initialization [readability-redundant-string-init]
    std::string line = "";
                ^~~~~~~~~
                line
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(116,21): warning G611155E6: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        if (line.find(storyID) != std::string::npos) {
                      ^
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(132,48): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::vector<std::vector<std::string>> Backlog::getMatrix() { return matrix; }
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~          ^
  auto                                                       -> std::vector<std::vector<std::string>>
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(138,33): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::vector<UserStory> Backlog::getProductBacklog() { return productBacklog; }
  ~~~~~~~~~~~~~~~~~~~~~~          ^
  auto                                                -> std::vector<UserStory>
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(144,35): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::vector<std::string> Backlog::getRow() { return row; }
  ~~~~~~~~~~~~~~~~~~~~~~~~          ^
  auto                                       -> std::vector<std::string>
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(156,13): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::string operator-(Backlog& backlog) {
  ~~~~~~~~~~~ ^
  auto                                    -> std::string
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(157,21): warning G611155E6: narrowing conversion from 'std::vector<std::basic_string<char>>::size_type' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int backlogSize = backlog.row.size();
                      ^
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(161,5): warning G30C2FD22: do not use 'else' after 'return' [readability-else-after-return]
    } else {
      ^~~~~~
C:\Users\chris\source\repos\Userstoryconsole\Collaborator.cpp(10,19): warning GF0156036: variable 'collaboratorID' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  int Collaborator::collaboratorID = 0;
                    ^
C:\Users\chris\source\repos\Userstoryconsole\Collaborator.cpp(38,27): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::string Collaborator::getcollaboratorName() { return collaboratorName; }
  ~~~~~~~~~~~               ^
  auto                                            -> std::string
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(15,1): warning G775842FB: constructor does not initialize these fields: storyPointsComplete, storyPointsLeftToComplete [cppcoreguidelines-pro-type-member-init]
  Iteration::Iteration(std::string iterationName, std::string iterationType,
  ^
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(29,24): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::string Iteration::getIterationName() { return iterationName; }
  ~~~~~~~~~~~            ^
  auto                                      -> std::string
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(36,16): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  int Iteration::getIterationLength() { return iterationLength; }
  ~~~            ^
  auto                                -> int
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(36,16): warning G0EB485FC: method 'getIterationLength' can be made const [readability-make-member-function-const]
  int Iteration::getIterationLength() { return iterationLength; }
                 ^
                                      const
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(43,24): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::string Iteration::getIterationType() { return iterationType; }
  ~~~~~~~~~~~            ^
  auto                                      -> std::string
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(51,16): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  int Iteration::getEstimatedVelocity() { return estimatedVelocity; }
  ~~~            ^
  auto                                  -> int
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(51,16): warning G0EB485FC: method 'getEstimatedVelocity' can be made const [readability-make-member-function-const]
  int Iteration::getEstimatedVelocity() { return estimatedVelocity; }
                 ^
                                        const
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(96,3): warning G4F9AAA59: use range-based for loop instead [modernize-loop-convert]
    for (size_t index = 0; index < productBacklog.size(); index++) {
    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (auto & index : productBacklog)
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(16,14): warning GF8BFC15C: use '= default' to define a trivial default constructor [modernize-use-equals-default]
  KanbanBoard::KanbanBoard() {}
               ^             ~~
                             = default;
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(55,15): warning GCDA9FA94: redundant string initialization [readability-redundant-string-init]
    std::string kanbanBoardLine = "";
                ^~~~~~~~~~~~~~~~~~~~
                kanbanBoardLine
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(108,22): warning G05FB182C: static member accessed through instance [readability-static-accessed-through-instance]
        std::to_string(userStory.storyID), userStory.getStatus()));
                       ^~~~~~~~~~
                       UserStory::
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(21,15): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::ostream& operator<<(std::ostream& out, UserStory& userstory);
  ~~~~~~~~~~~~~ ^
  auto                                                              -> std::ostream&
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(22,11): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  UserStory createUserStory(Backlog& backlog);
  ~~~~~~~~~ ^
  auto                                        -> UserStory
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(25,6): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  bool is_empty(std::ifstream& pFile);
  ~~~~ ^
  auto                                -> bool
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(31,5): warning G46707FB5: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  int main() {
      ^
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(31,5): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  int main() {
  ~~~ ^
  auto       -> int
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(60,15): warning GCDA9FA94: redundant string initialization [readability-redundant-string-init]
    std::string line = "";
                ^~~~~~~~~
                line
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(71,24): warning G611155E6: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    UserStory::storyID = masterBacklog.getRow().size() - 1;
                         ^
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(132,19): warning GF0156036: variable 'collaborator' is not initialized [cppcoreguidelines-init-variables]
      Collaborator* collaborator;
                    ^
                                 = nullptr
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(133,16): warning GF0156036: variable 'iteration' is not initialized [cppcoreguidelines-init-variables]
      Iteration* iteration;
                 ^
                           = nullptr
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(137,17): warning GCDA9FA94: redundant string initialization [readability-redundant-string-init]
      std::string inputString = "";
                  ^~~~~~~~~~~~~~~~
                  inputString
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(220,11): warning G3A9ADC90: assigning newly created 'gsl::owner<>' to non-owner 'Iteration *' [cppcoreguidelines-owning-memory]
            iteration = new Iteration(inputString, "Iteration", 0);
            ^
  Suppressed 249197 warnings (249197 in non-user code).
  Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(231,12): warning G99EE5DD7: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        case 5:
             ^
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(240,12): warning GA916C317: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        case 6:
             ^
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(249,12): warning G0D254987: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        case 7:
             ^
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(275,12): warning G430775E5: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    } while (userInputKey);
             ^
                          != 0
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(293,15): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::ostream& operator<<(std::ostream& out, UserStory& userstory) {
  ~~~~~~~~~~~~~ ^
  auto                                                              -> std::ostream&
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(308,11): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  UserStory createUserStory(Backlog& backlog) {
  ~~~~~~~~~ ^
  auto                                        -> UserStory
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(310,15): warning GCDA9FA94: redundant string initialization [readability-redundant-string-init]
    std::string storyName = "";
                ^~~~~~~~~~~~~~
                storyName
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(311,15): warning GCDA9FA94: redundant string initialization [readability-redundant-string-init]
    std::string storyBody = "";
                ^~~~~~~~~~~~~~
                storyBody
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(352,25): warning G05FB182C: static member accessed through instance [readability-static-accessed-through-instance]
      savedUserStories << userstory.storyID << ", " << userstory.getStoryName()
                          ^~~~~~~~~~
                          UserStory::
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(356,9): warning G70A15EFF: statement should be inside braces [google-readability-braces-around-statements,readability-braces-around-statements]
    } else
          ^
           {
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(361,35): warning G05FB182C: static member accessed through instance [readability-static-accessed-through-instance]
    backlog.addToRow(std::to_string(userstory.storyID) + ", " +
                                    ^~~~~~~~~~
                                    UserStory::
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(379,6): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  bool is_empty(std::ifstream& pFile) {
  ~~~~ ^
  auto                                -> bool
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(25,16): warning GF0156036: variable 'storyID' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  int UserStory::storyID = 0;
                 ^
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(68,24): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::string UserStory::getStoryName() { return storyName; }
  ~~~~~~~~~~~            ^
  auto                                  -> std::string
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(75,24): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::string UserStory::getStoryBody() { return storyBody; }
  ~~~~~~~~~~~            ^
  auto                                  -> std::string
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(82,16): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  int UserStory::getStoryPoints() { return storyPoints; }
  ~~~            ^
  auto                            -> int
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(82,16): warning G0EB485FC: method 'getStoryPoints' can be made const [readability-make-member-function-const]
  int UserStory::getStoryPoints() { return storyPoints; }
                 ^
                                  const
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(89,16): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  int UserStory::getStatus() { return status; }
  ~~~            ^
  auto                       -> int
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(97,24): warning GB5504D48: use a trailing return type for this function [modernize-use-trailing-return-type]
  std::string UserStory::getStatusString() {
  ~~~~~~~~~~~            ^
  auto                                     -> std::string
  Userstoryconsole.vcxproj -> C:\Users\chris\source\repos\Userstoryconsole\Debug\Userstoryconsole.exe
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(42): warning C26460: The reference argument 'userStory' for function 'Backlog::addUserStory' can be marked as const (con.3).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(57): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(73): warning C26496: The variable 'lineStoryID' does not change after construction, mark it as const (con.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(72): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(72): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(82): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(84): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(87): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(90): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(90): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(90): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(125): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(157): warning C26496: The variable 'backlogSize' does not change after construction, mark it as const (con.4).
C:\Users\chris\source\repos\Userstoryconsole\Backlog.cpp(160): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\UserStory.h(48): warning C26812: The enum type 'UserStory::Status' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).
C:\Users\chris\source\repos\Userstoryconsole\Collaborator.cpp(14): warning C26455: Default constructor may not throw. Declare it 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\Developer.cpp(25): warning C26433: Function 'Developer::assignStory' should be marked with 'override' (c.128).
C:\Users\chris\source\repos\Userstoryconsole\Developer.cpp(25): warning C26436: The type 'class Developer' with a virtual function needs either public virtual or protected non-virtual destructor (c.35).
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(36): warning C26440: Function 'Iteration::getIterationLength' can be declared 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(51): warning C26440: Function 'Iteration::getEstimatedVelocity' can be declared 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(72): warning C26440: Function 'Iteration::setIterationLength' can be declared 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(79): warning C26440: Function 'Iteration::setEstimatedVelocity' can be declared 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(86): warning C26460: The reference argument 'userstory' for function 'Iteration::addUserStory' can be marked as const (con.3).
C:\Users\chris\source\repos\Userstoryconsole\Iteration.cpp(97): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(16): warning C26455: Default constructor may not throw. Declare it 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(28): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(28): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(35): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(38): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(41): warning C26446: Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(51): warning C26433: Function 'KanbanBoard::printBoard' should be marked with 'override' (c.128).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(51): warning C26436: The type 'class KanbanBoard' with a virtual function needs either public virtual or protected non-virtual destructor (c.35).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(66): warning C26433: Function 'KanbanBoard::getDoneUserStory' should be marked with 'override' (c.128).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(79): warning C26433: Function 'KanbanBoard::getInProgressUserStory' should be marked with 'override' (c.128).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(91): warning C26433: Function 'KanbanBoard::getToDoUserStory' should be marked with 'override' (c.128).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(106): warning C26433: Function 'KanbanBoard::addStoryToMap' should be marked with 'override' (c.128).
C:\Users\chris\source\repos\Userstoryconsole\KanbanBoard.cpp(118): warning C26433: Function 'KanbanBoard::updateStatus' should be marked with 'override' (c.128).
C:\Users\chris\source\repos\Userstoryconsole\ScrumMaster.cpp(26): warning C26433: Function 'ScrumMaster::assignStory' should be marked with 'override' (c.128).
C:\Users\chris\source\repos\Userstoryconsole\ScrumMaster.cpp(26): warning C26436: The type 'class ScrumMaster' with a virtual function needs either public virtual or protected non-virtual destructor (c.35).
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(216): warning C26409: Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11).
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(220): warning C26409: Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11).
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(218): warning C26409: Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11).
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(170): warning C26409: Avoid calling new and delete explicitly, use std::make_unique<T> instead (r.11).
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(132): warning C26494: Variable 'collaborator' is uninitialized. Always initialize an object (type.5).
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(133): warning C26494: Variable 'iteration' is uninitialized. Always initialize an object (type.5).
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(414): warning C26429: Symbol 'func' is never tested for nullness, it can be marked as not_null (f.23).
C:\Users\chris\source\repos\Userstoryconsole\Source.cpp(414): warning C26440: Function 'invokeFunc' can be declared 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(30): warning C26455: Default constructor may not throw. Declare it 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(34): warning C26812: The enum type 'UserStory::Status' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(82): warning C26440: Function 'UserStory::getStoryPoints' can be declared 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(89): warning C26440: Function 'UserStory::getStatus' can be declared 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(130): warning C26440: Function 'UserStory::setStoryPoints' can be declared 'noexcept' (f.6).
C:\Users\chris\source\repos\Userstoryconsole\UserStory.cpp(135): warning C26440: Function 'UserStory::completeUserStory' can be declared 'noexcept' (f.6).
